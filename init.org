#+TITLE: grzm's Emacs configuration
#+AUTHOR: Michael Glaesemann
#+PROPERTY: header-args :tangle yes
#+BABEL :cache yes

This is my dot-emacs. There are many like it, but this one
is mine. My dot-emacs is my best friend. It is my life. I must master
it as I master my life. My dot-emacs, without me, is useless. Without
my dot-emacs, I am useless.

* Requirements

The configuration requires =use-package=.

I generally use this configuration with [[https://emacsformacosx.com][Emacs for Mac OS X]].


* Initialization

My brain works better in lexical scope.

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
(setq debug-on-error  t)
#+end_src

** Initialization timing

I'm interested in how long Emacs initialization takes. This isn't
something I monitor closely, but I can't measure it if I don't add
code to do so. This is lifted from [[https://github.com/jwiegley/dot-emacs][John Wiegley's config]], the
gentleman who brought us (among other things), =use-package=. Not
surprisingly, he's /very/ interested in initialization
performance. His is another Emacs config that's worth reviewing for
ideas.

#+begin_src emacs-lisp
(defconst emacs-start-time (current-time))

(unless noninteractive
  (message "Loading %s..." load-file-name))
#+end_src

** Tangling

=init.el= is loaded first, which, among other things, tangles and
loads this file, which contains the majority of my Emacs
configuration. The tangled output actually replaces the =init.el= in
the repo. After initial checkout, I don't want to track this generated
replacement, so I can tell git to ignore it:

#+begin_src shell :tangle no
git update-index --assume-unchanged init.el
#+end_src

And if there /are/ modifications I want to make, I can tell git to
track changes again.

#+begin_src shell :tangle no
git update-index --no-assume-unchanged init.el
#+end_src

If for some reason you want to start from the committed init.el again,
just check it out. Git will pull it from the index, but still not track it.

#+begin_src shell :tangle no
git checkout init.el
#+end_src

And let's have this file automatically re-tangled on save to keep
=init.el= up-to-date.

#+begin_src emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle))))

(add-hook 'after-save-hook 'tangle-init)
#+end_src


This method of is largely based on [[https://github.com/larstvei/dot-emacs][Lars Tveito's =init.el=]]. He also
byte-compiles the output. I haven't seen any performance advantage
of byte-compiling my setup, so I've removed that as it brings along
another layer of complexity. There's a lot of other great stuff his
config; it's well worth a look.

** =use-package=

I use =use-package= to organize my config. I've found it's much more
concise than what I was doing before, and also encourages a more
organized config. But, to use it, I need to make sure it's available,
so let's ensure that. This is really just an issue when configuring
emacs on a new machine: after that, =use-package= is already
available. But it's worth having init.el ensuring it's there that very
first time.


#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))

(package-initialize nil)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src


* Configuration

#+begin_src emacs-lisp
(setq custom-file (make-temp-file "emacs--custom-file"))
#+end_src

Besides being Lisp, =cl= provides =labels= and =defvar=, used
below. Wrapped gently in =eval-when-compile= to silence

#+begin_quote
Warning (bytecomp): cl package required at runtime
#+end_quote

#+begin_src emacs-lisp
(eval-when-compile
  (require 'cl))
#+end_src

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

#+begin_src emacs-lisp
(eval-and-compile
  (mapc #'(lambda (path)
            (add-to-list 'load-path
                         (expand-file-name path user-emacs-directory)))
        '("elisp" "misc" "packages" "elpa")))
#+end_src

#+begin_src emacs-lisp
(defsubst hook-into-modes (func &rest modes)
  (dolist (mode-hook modes) (add-hook mode-hook func)))
#+end_src

#+begin_src emacs-lisp
(require 'browse-kill-ring)
#+end_src

Use =y= and =n= in lieu of =yes= and =no= in mini-buffer prompts.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

#+begin_src emacs-lisp
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))
#+end_src


#+begin_src emacs-lisp
(require 'clean-up-buffer)
#+end_src

#+begin_src emacs-lisp
(setq auth-sources
      (quote
       ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc" macos-keychain-internet macos-keychain-internet)))
#+end_src

** UI settings

Quiet startup: Don't display the splash screen, start with a clear
scratch buffer, and don't display /"For information about GNU Emacs
and the GNU system, type C-h C-a."/.  This last is surprisingly
difficult to do, and requires both the =put= call and setting the
value to your user name.

From https://emacs.stackexchange.com/a/36303, with one change: use a
non-empty list (e.g., =(t)=) instead of =t= for the ='saved-value= or
you'll see errors like /(wrong-type-argument listp t)/ when Emacs
first tries to write customizations, and errors like /'forward-sexp:
Scan error: "Unbalanced parentheses"/ when it subsequently tries to
read the malformed custom-file contents it attempted to write.

#+begin_src emacs-lisp
(put 'inhibit-startup-echo-area-message 'saved-value '(t))
(setq inhibit-startup-screen t
      initial-scratch-message ""
      inhibit-startup-echo-area-message user-login-name)
#+end_src

When in a windowing system, set the default window size.

#+begin_src emacs-lisp
(when (window-system)
  (setq initial-frame-alist
        `((top . 0)
          (left . 600)
          (height . 60)
          (width . 100)))
  (setq default-frame-alist (copy-alist initial-frame-alist)))
#+end_src

#+begin_src emacs-lisp
(load-theme 'solarized-light-high-contrast t)
#+end_src

Hide the toolbar.

#+begin_src emacs-lisp
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
;; (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

Always display the column number

#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src

** Editing

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil) ;; insert multiple spaces instead of tabs
#+end_src

#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

#+begin_src emacs-lisp

;; Use C-x C-m as a shortcut for M-x: Let's save our small fingers!
;; Hint from Steve Yegge: http://steve.yegge.googlepages.com/effective-emacs
;; Invoice M-x without the alt key
(global-set-key "\C-x\C-m" 'execute-extended-command)

;; Steve also recommends adding C-c C-m to allow for slop in hitting C-x
;; Don't know if I'll need that now, but it might be nice in the future
;;(global-set-key "\C-x\C-m" 'execute-extended-command)
;; However, I often mistype C-x m and I don't use mail, so
(global-set-key "\C-xm" 'execute-extended-command)

;;; Unbind `C-x f', which, by default sets fill-text width, which is uncommon
(global-unset-key "\C-xf")

;;; Rebind `C-x C-b' for 'buffer-menu', rather than list-buffers
(global-set-key "\C-x\C-b" 'buffer-menu)

;; Item 3: Prefer backward-kill-word over Backspace
;; Another of Steve Yegge's hints
;; For fast typists, it's faster to retype a word rather than backspace
;; to fix just the error, so map this to C-w. However, C-w is already
;; mapped for kill-region, so remap kill-region to C-x C-k
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
;; Again, Steve maps C-c C-k as well
;; (global-set-key "\C-c\C-k" 'kill-region)

;; Item 9: Master Emacs's regular expressions
;; Bind M-r and M-s to isearch-forward-regexp and isearch-backward-regexp
;; Note that this stomps on the default binding for move-to-window-line (M-r)
(global-set-key "\M-s" 'isearch-forward-regexp)
(global-set-key "\M-r" 'search-backward-regexp)

;; Since query-replace-regexp and (replace-regexp) are so useful,
;; give them abbreviated aliases
(defalias 'rr 'replace-regexp)
(defalias 'qrr 'query-replace-regexp)

;; from http://wiki.rubygarden.org/Ruby/page/show/InstallingEmacsExtensions
;; This is also of interrest, it automagically does a "chmod u+x" when you
;; save a script file (starting with "#!").
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)

(defvar gtd-file "~/Documents/lists/gtd.org")
(defun gtd ()
  "Visit gtd.org file"
  (interactive)
  (find-file gtd-file))

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

(setq vc-follow-symlinks t)
#+end_src

#+begin_src emacs-lisp
(use-package autopair :defer t)
#+end_src


#+begin_quote
Warning (bytecomp): assignment to free variable ‘cider-prompt-save-file-on-load’
#+end_quote
#+begin_src emacs-lisp
(defvar cider-prompt-save-file-on-load)
#+end_src

#+begin_src emacs-lisp
(use-package cider
  :defer t
  :config
  (setq cider-prompt-save-file-on-load nil
        cider-eval-result-prefix " ;; => "
        cider-font-lock-dynamically '(macro core function var)
        cider-repl-pop-to-buffer-on-connect 'display-only
        cider-boot-parameters "cider repl -w wait"))
#+end_src

#+begin_src emacs-lisp
(put 'cider-clojure-cli-global-options 'safe-local-variable #'stringp)
(put 'cider-boot-parameters 'safe-local-variable #'stringp)
#+end_src

#+begin_src emacs-lisp
(use-package clj-refactor
  :defer t
  :ensure t
  :config
  (setq cljr-assume-language-context (quote clj)
        cljr-clojure-test-declaration "[clojure.test :as test :refer [are deftest is]]")
  ;; :bind ("/" . cljr-slash)
  )
#+end_src

#+begin_src emacs-lisp
(use-package clojure-mode
  :ensure t
  :defer t
  :config
  (setq clojure-indent-style :align-arguments
        clojure-align-forms-automatically t)
  (defun my-clojure-mode-hook ()
    (paredit-mode +1)
    (put-clojure-indent 'defui '(1 nil nil (1)))
    (rainbow-delimiters-mode)
    (inf-clojure-minor-mode)
    )
  (add-hook 'clojure-mode-hook 'my-clojure-mode-hook))
#+end_src

Structural editing rocks. Use it for =emacs-lisp=, too.

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda () (paredit-mode +1)))
#+end_src

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+end_src

#+begin_src emacs-lisp
(use-package f
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package inf-clojure
  :defer t
  :config (setq inf-clojure-program "/Users/grzm/homebrew/bin/planck"))
#+end_src

#+begin_src emacs-lisp
(use-package ido
  :demand t
  :config
  (setq ido-enable-flex-matching t
        ido-create-new-buffer 'always)
  (ido-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (setq magit-diff-refine-hunk (quote all))
  :bind ("C-x g" . magit-status))
#+end_src

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\`README\\.markdown\\'" . gfm-mode)
         ("\\`README\\.md\\'" . gfm-mode)
         ("\\`CHANGELOG\\.md\\'" . gfm-mode)
         ("\\`CHANGELOG\\.markdown\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (setq markdown-command "/Users/grzm/homebrew/bin/multimarkdown"

        markdown-css-paths
        '("https://cdn.rawgit.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css")

        markdown-fontify-code-blocks-natively t))
#+end_src

#+begin_src emacs-lisp
(use-package markdown-preview-mode
  :after solarized-theme
  :defer t
  :config
  (setq markdown-preview-stylesheets
        '("https://cdn.rawgit.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css"
          "https://cdn.rawgit.com/isagalaev/highlight.js/master/src/styles/solarized-light.css")))
#+end_src

#+begin_src emacs-lisp
(use-package org
  :custom-face
  (org-level-1 ((t (:inherit variable-pitch :foreground "#cb4b16"))))
  (org-level-2 ((t (:inherit variable-pitch :foreground "#859900"))))
  (org-level-3 ((t (:inherit variable-pitch :foreground "#268bd2"))))
  (org-level-4 ((t (:inherit variable-pitch :foreground "#b58900")))))
#+end_src

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t)
#+end_src

#+begin_src emacs-lisp
;; when using Emacs installed via elpa, need to install it without loading init.el
;; to prevent a messed up installation. See
;; https://orgmode.org/manual/Installation.html
;; Important: You need to do this in a session where no ‘.org’ file has been visited, i.e., where no Org built-in function have been loaded. Otherwise autoload Org functions will mess up the installation.
;; For emacsformacosx:
;; ~/Applications/Emacs.app/Contents/MacOS/Emacs --no-init-file
;; Then do the normal installation via package

;; All of this is motivated to resolve the following error which appears when runnign org-refile:
;; org-copy-subtree: Invalid function: org-preserve-local-variables

;; Caused by org-preserve-local-variables not being defined

(defun grzm/org-mode-hook ()
  "Stop the org-level headers from increasing in height relative to the other text."
  (dolist (face '(org-level-1
                  org-level-2
                  org-level-3
                  org-level-4
                  org-level-5))
    (set-face-attribute face nil
                        :weight 'normal
                        :height 1.0
                        :inherit nil)))

(add-hook 'org-mode-hook 'grzm/org-mode-hook)

(define-key global-map "\C-cc" 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)

(setq org-ellipsis "↩")

(setq org-refile-use-outline-path t)
(setq org-refile-allow-creating-parent-nodes 'confirm)

(setq org-agenda-show-all-dates t
      org-duration-format (quote h:mm)
      org-startup-folded nil
      org-startup-indented t)

(setq org-todo-keywords
      (quote
       ((sequence "TODO(t)" "STARTED(s)" "NEXT(n)" "APPT(a)" "WAITING(w)" "SOMEDAY(p)" "|" "DONE(d)" "CANCELLED(c)" "DEFERRED(f)"))))


(setq org-log-done 'time)

(defun org-todo-checkbox (&optional pos)
  (let ((todo (org-entry-get (or pos (point)) "TODO" t)))
    (cond
     ((string= todo "TODO") "[ ]")
     ((string= todo "DONE")  "[X]")
     (t "[/]"))))

(defun org-d24c-category (&optional pos)
  (let ((category (org-entry-get (or pos (point)) "CATEGORY" t)))
    (if (and category (not (string= category "")))
        (format "[%s]" category)
      "")))

(defun org-d24c-prefix (&optional pos)
  (format "%s %s" (org-todo-checkbox pos) (org-d24c-category pos)))

(setq org-support-shift-select t)
#+end_src

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

#+begin_src emacs-lisp
(use-package org-re-reveal
  :defer t
  :config
  (add-hook 'org-mode-hook (lambda () (load-library "org-re-reveal"))))
#+end_src

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

#+begin_src emacs-lisp
(use-package paredit
  :hook ((lisp-mode emacs-lisp-mode) . paredit-mode)
  :ensure t
  :config
  (defun check-region-parens ()
    "Check if parentheses in the region are balanced. Signals a
scan-error if not."
    (interactive)
    (save-restriction
      (save-excursion
        (let ((deactivate-mark nil))
          (condition-case c
              (progn
                (narrow-to-region (region-beginning) (region-end))
                (goto-char (point-min))
                (while (/= 0 (- (point)
                                (forward-list))))
                t)
            (scan-error (signal 'scan-error '("Region parentheses not balanced")))))))))
#+end_src

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :config (projectile-mode +1))
#+end_src

#+begin_src emacs-lisp
(use-package quelpa-use-package
  :after quelpa
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(define-minor-mode pollen-mode "edit pollen markup")

(add-to-list 'auto-mode-alist '("\\.pp$" . pollen-mode))
#+end_src

#+begin_src emacs-lisp
;; This file contains code to set up Emacs to edit PostgreSQL source
;; code.  Copy these snippets into your .emacs file or equivalent, or
;; use load-file to load this file directly.
;;
;; Note also that there is a .dir-locals.el file at the top of the
;; PostgreSQL source tree, which contains many of the settings shown
;; here (but not all, mainly because not all settings are allowed as
;; local variables).  So for light editing, you might not need any
;; additional Emacs configuration.


;;; C files

;; Style that matches the formatting used by
;; src/tools/pgindent/pgindent.  Many extension projects also use this
;; style.
(c-add-style "postgresql"
             '("bsd"
               (c-auto-align-backslashes . nil)
               (c-basic-offset . 4)
               (c-offsets-alist . ((case-label . +)
                                   (label . -)
                                   (statement-case-open . +)))
               (fill-column . 78)
               (indent-tabs-mode . t)
               (tab-width . 4)))

(defun postgresql-c-mode-hook ()
  (when (string-match "/postgres\\(ql\\)?/" buffer-file-name)
    (c-set-style "postgresql")
    ;; Don't override the style we just set with the style in
    ;; `dir-locals-file'.  Emacs 23.4.1 needs this; it is obsolete,
    ;; albeit harmless, by Emacs 24.3.1.
    (set (make-local-variable 'ignored-local-variables)
         (append '(c-file-style) ignored-local-variables))))

(add-hook 'c-mode-hook 'postgresql-c-mode-hook)


;;; Perl files

;; Style that matches the formatting used by
;; src/tools/pgindent/perltidyrc.
(defun pgsql-perl-style ()
  "Perl style adjusted for PostgreSQL project"
  (interactive)
  (setq perl-brace-imaginary-offset 0)
  (setq perl-brace-offset 0)
  (setq perl-continued-brace-offset 4)
  (setq perl-continued-statement-offset 4)
  (setq perl-indent-level 4)
  (setq perl-label-offset -2)
  (setq indent-tabs-mode t)
  (setq tab-width 4))

(add-hook 'perl-mode-hook
          (defun postgresql-perl-mode-hook ()
            (when (string-match "/postgres\\(ql\\)?/" buffer-file-name)
              (pgsql-perl-style))))


;;; documentation files

;; (add-hook 'sgml-mode-hook
;;           (defun postgresql-sgml-mode-hook ()
;;              (when (string-match "/postgres\\(ql\\)?/" buffer-file-name)
;;                (setq fill-column 78)
;;                (setq indent-tabs-mode nil)
;;                (setq sgml-basic-offset 1))))


;;; Makefiles

;; use GNU make mode instead of plain make mode
(add-to-list 'auto-mode-alist '("/postgres\\(ql\\)?/.*Makefile.*" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("/postgres\\(ql\\)?/.*\\.mk\\'" . makefile-gmake-mode))
#+end_src

#+begin_src emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
#+end_src

#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+begin_src emacs-lisp
(use-package recentf
  :defer 10
  :bind ("C-x C-r" . recentf-open-files)
  :config
  (recentf-mode 1)
  (setq recentf-max-menu-items 50
        recentf-max-saved-items 100))
#+end_src

#+begin_src emacs-lisp
(use-package ruby-mode
  :mode (("\\.rake\'" . ruby-mode)
         ("Rakefile\'" . ruby-mode)
         ("rakefile\'" . ruby-mode)
         ("\\.gemspec'" . ruby-mode)))
#+end_src

** =shell-script-mode=
Use =shell-script-mode= for scripts with a =bash= she-bang. Works with
=#!/bin/bash= and =#!/usr/bin/env bash=.

#+begin_src emacs-lisp
(add-to-list 'interpreter-mode-alist '("bash" . shell-script-mode))
#+end_src

#+begin_src emacs-lisp
(use-package solarized-theme
  :ensure t
  :if window-system
  :config
  (setq solarized-distinct-fringe-background t
        solarized-high-contrast-mode-line t))
#+end_src

#+begin_src emacs-lisp
(use-package typo
  :defer t
  :config
  (progn
    (setq-default typo-language "English")
    (defun enable-typo-mode ()
      (cond ((string-match "/_\\(drafts\\|posts\\)/.+\\.\\(markdown\\|\\md\\)$" buffer-file-name)
             (typo-mode 1))))
    (add-hook 'markdown-mode-hook 'enable-typo-mode)))
#+end_src

#+begin_src emacs-lisp
(use-package yasnippet
  :defer t
  :config
  (setq yasindent-line 'fixed))
#+end_src

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq create-lockfiles nil)
#+end_src

** Work/Personal separation

I have some work-specific Emacs configuration that I like to keep
in a separate repo from my personal setup. Let's see if it's there.

#+begin_src emacs-lisp
(setq work-emacs-directory "~/.emacs.work.d/"
      work-p (file-exists-p work-emacs-directory))
#+end_src

#+begin_src emacs-lisp
  (when work-p
    (org-babel-load-file (expand-file-name "README.org" work-emacs-directory)))
#+end_src

If it's not, continue with my usual config.

#+begin_src emacs-lisp
(unless work-p
  (setq grzm-org-directory "~/org/"
        grzm-org-inbox-dot-org (expand-file-name "inbox.org" grzm-org-directory)
        grzm-org-todo-dot-org (expand-file-name "todo.org" grzm-org-directory)
        grzm-org-someday-maybe-dot-org (expand-file-name "someday-maybe.org" grzm-org-directory)

        grzm-beorg-directory "/Users/grzm/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/"
        grzm-beorg-inbox-dot-org (expand-file-name "inbox.org" grzm-beorg-directory)

        grzm-org-template-directory (expand-file-name "org/templates/" user-emacs-directory)

        org-agenda-files
        `("~/Documents/gtd/inbox.org"
          ,grzm-org-inbox-dot-org
          ,grzm-beorg-inbox-dot-org
          ,grzm-org-todo-dot-org)

        org-capture-templates
        `(("t" "Task" entry
           (file ,grzm-org-inbox-dot-org)
           (file ,(expand-file-name "task.org" grzm-org-template-directory))
           :prepend t)

          ("p" "Project" entry
           (file+headline ,grzm-org-todo-dot-org "Projects")
           (file ,(expand-file-name "project.org" grzm-org-template-directory))))

        org-refile-targets '((org-agenda-files :maxlevel . 3))

        org-tag-alist
        '(("q" . ?q)
          ("automower" . ?a)
          ("postgresql" . ?p)
          ("emacs" . ?e))

        org-agenda-custom-commands
        '(("n" "Agenda and all TODOs"
           ((agenda "" nil)
            (alltodo "" nil))
           nil)))

  :end)
#+end_src

I've found Tasshin Michael Fogleman's work on using org-mode with GTD
really helpful.  The templates and daily-review function are built on
his work. See his [[https://github.com/mwfogleman/.emacs.d/blob/master/michael.org#capture-templates][Emacs config]] and his [[https://gist.github.com/mwfogleman/267b6bc7e512826a2c36cb57f0e3d854][Building a Second Brain
templates]]. He also has posted a [[https://www.youtube.com/watch?v=LQwjSd3X9xE][video of how he uses them during his
daily review]].

#+begin_src emacs-lisp
(setq grzm-review-dot-org "/tmp/reviews.org")
(f-touch grzm-review-dot-org)

;; This is buggy: first time after startup, calling C-c r, d raises the following error:
;; (error "No capture template referred to by \"d\" keys")
;; Subsequent calls seem fine, as does calling the function directly.
(defun grzm-new-daily-review ()
  (interactive)
  (let ((org-capture-templates `(("d" "Review: Daily Review" entry
                                  (file+olp+datetree ,grzm-review-dot-org)
                                  (file ,(expand-file-name "daily-review.org"
                                                           grzm-org-template-directory))))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (org-clock-in))))

(bind-keys :prefix-map review-map
           :prefix "C-c r"
           ("d" . grzm-new-daily-review))
#+end_src

* Report initialization timing

#+begin_src emacs-lisp
(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed )))
            t))
#+end_src
