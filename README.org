#+TITLE: grzm's Emacs configuration
#+OPTIONS: toc:4 h:4

This is my dot-emacs. There are many like it, but this one
is mine. My dot-emacs is my best friend. It is my life. I must master
it as I master my life. My dot-emacs, without me, is useless. Without
my dot-emacs, I am useless.

* Requirements

The configuration requires =use-package=.

I generally use this configuration with [[https://emacsformacosx.com][Emacs for Mac OS X]].


* Initialization

=init.el= is loaded first, which, among other things, tangles and loads this file, which contains the majority of my Emacs configuration.

* The configuration

Besides being Lisp, =cl= provides =labels= and =defvar=, used
below. Wrapped gently in =eval-when-compile= to silence

#+begin_quote
Warning (bytecomp): cl package required at runtime
#+end_quote

#+begin_src emacs-lisp
(eval-when-compile
  (require 'cl))
#+end_src

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

#+begin_src emacs-lisp
(eval-and-compile
  (mapc #'(lambda (path)
            (add-to-list 'load-path
                         (expand-file-name path user-emacs-directory)))
        '("elisp" "misc" "packages" "elpa")))
#+end_src

#+begin_src emacs-lisp
(defsubst hook-into-modes (func &rest modes)
  (dolist (mode-hook modes) (add-hook mode-hook func)))
#+end_src

#+begin_src emacs-lisp
(require 'browse-kill-ring)
#+end_src

Use =y= and =n= in lieu of =yes= and =no= in mini-buffer prompts.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
(setq custom-file (make-temp-file ""))
#+end_src

#+begin_src emacs-lisp
(require 'clean-up-buffer)
#+end_src

#+begin_src emacs-lisp
(setq auth-sources
   (quote
    ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc" macos-keychain-internet macos-keychain-internet)))
#+end_src

** UI settings

Don't display the startup splash screen.

#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      initial-scratch-message ""
      inhibit-startup-echo-area-message t)
#+end_src

When in a windowing system, set the default window size.

#+begin_src emacs-lisp
 (when (window-system)
   (setq initial-frame-alist
         `((top . 0)
           (left . 600)
           (height . 60)
           (width . 100)))
   (setq default-frame-alist (copy-alist initial-frame-alist)))
#+end_src

#+begin_src emacs-lisp
(load-theme 'solarized-light t)
#+end_src

Hide the toolbar.

#+begin_src emacs-lisp
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
;; (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
;; (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

Always display the column number

#+begin_src emacs-lisp
 (setq column-number-mode t)
#+end_src

** Editing

#+begin_src emacs-lisp
 (setq-default indent-tabs-mode nil) ;; insert multiple spaces instead of tabs
#+end_src

#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

#+begin_src emacs-lisp

 ;; Use C-x C-m as a shortcut for M-x: Let's save our small fingers!
 ;; Hint from Steve Yegge: http://steve.yegge.googlepages.com/effective-emacs
 ;; Invoice M-x without the alt key
 (global-set-key "\C-x\C-m" 'execute-extended-command)

 ;; Steve also recommends adding C-c C-m to allow for slop in hitting C-x
 ;; Don't know if I'll need that now, but it might be nice in the future
 ;;(global-set-key "\C-x\C-m" 'execute-extended-command)
 ;; However, I often mistype C-x m and I don't use mail, so
 (global-set-key "\C-xm" 'execute-extended-command)

 ;;; Unbind `C-x f', which, by default sets fill-text width, which is uncommon
 (global-unset-key "\C-xf")

 ;;; Rebind `C-x C-b' for 'buffer-menu', rather than list-buffers
 (global-set-key "\C-x\C-b" 'buffer-menu)

 ;; Item 3: Prefer backward-kill-word over Backspace
 ;; Another of Steve Yegge's hints
 ;; For fast typists, it's faster to retype a word rather than backspace
 ;; to fix just the error, so map this to C-w. However, C-w is already
 ;; mapped for kill-region, so remap kill-region to C-x C-k
 (global-set-key "\C-w" 'backward-kill-word)
 (global-set-key "\C-x\C-k" 'kill-region)
 ;; Again, Steve maps C-c C-k as well
 ;; (global-set-key "\C-c\C-k" 'kill-region)

 ;; Item 9: Master Emacs's regular expressions
 ;; Bind M-r and M-s to isearch-forward-regexp and isearch-backward-regexp
 ;; Note that this stomps on the default binding for move-to-window-line (M-r)
 (global-set-key "\M-s" 'isearch-forward-regexp)
 (global-set-key "\M-r" 'search-backward-regexp)

 ;; Since query-replace-regexp and (replace-regexp) are so useful,
 ;; give them abbreviated aliases
 (defalias 'rr 'replace-regexp)
 (defalias 'qrr 'query-replace-regexp)

 ;; from http://wiki.rubygarden.org/Ruby/page/show/InstallingEmacsExtensions
 ;; This is also of interrest, it automagically does a "chmod u+x" when you
 ;; save a script file (starting with "#!").
 (add-hook 'after-save-hook
           'executable-make-buffer-file-executable-if-script-p)

 (setq backup-directory-alist `(("." . "~/.saves")))
 (setq backup-by-copying t)

 (defvar gtd-file "~/Documents/lists/gtd.org")
 (defun gtd ()
   "Visit gtd.org file"
   (interactive)
   (find-file gtd-file))

 (put 'downcase-region 'disabled nil)
 (put 'upcase-region 'disabled nil)

 (setq vc-follow-symlinks t)
#+end_src

#+begin_src emacs-lisp
  (use-package autopair :defer t)
#+end_src


#+begin_quote
Warning (bytecomp): assignment to free variable ‘cider-prompt-save-file-on-load’
#+end_quote
#+begin_src emacs-lisp
(defvar cider-prompt-save-file-on-load)
#+end_src

#+begin_src emacs-lisp
  (use-package cider
    :defer t
    :config
    (setq cider-prompt-save-file-on-load nil
          cider-eval-result-prefix " ;; => "
          cider-font-lock-dynamically '(macro core function var)
          cider-repl-pop-to-buffer-on-connect 'display-only
          cider-boot-parameters "cider repl -w wait"))
#+end_src

#+begin_src emacs-lisp
  (put 'cider-clojure-cli-global-options 'safe-local-variable #'stringp)
  (put 'cider-boot-parameters 'safe-local-variable #'stringp)
#+end_src

#+begin_src emacs-lisp
    (use-package clj-refactor
      :defer t
      :ensure t
      :config
      (setq cljr-assume-language-context (quote clj)
            cljr-clojure-test-declaration "[clojure.test :as test :refer [are deftest is]]")
      ;; :bind ("/" . cljr-slash)
      )
#+end_src

#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t
    :defer t
    :config
    (setq clojure-indent-style :align-arguments
          clojure-align-forms-automatically t)
    (defun my-clojure-mode-hook ()
      (paredit-mode +1)
      (put-clojure-indent 'defui '(1 nil nil (1)))
      (rainbow-delimiters-mode)
      (inf-clojure-minor-mode)
      )
    (add-hook 'clojure-mode-hook 'my-clojure-mode-hook))
#+end_src

#+begin_src emacs-lisp
  (load-library "emacs-lisp-mode-config")
#+end_src

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+end_src


#+begin_src emacs-lisp
  (use-package inf-clojure
    :defer t
    :config (setq inf-clojure-program "/Users/grzm/homebrew/bin/planck"))
#+end_src

#+begin_src emacs-lisp
  (use-package ido
    :demand t
    :config
    (setq ido-enable-flex-matching t
          ido-create-new-buffer 'always)
    (ido-mode 1))
#+end_src

#+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :config
      (setq magit-diff-refine-hunk (quote all))
      :bind ("C-x g" . magit-status))
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\`README\\.markdown\\'" . gfm-mode)
           ("\\`README\\.md\\'" . gfm-mode)
           ("\\`CHANGELOG\\.md\\'" . gfm-mode)
           ("\\`CHANGELOG\\.markdown\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :config
    (setq markdown-command "/Users/grzm/homebrew/bin/multimarkdown"

          markdown-css-paths
          '("https://cdn.rawgit.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css")

          markdown-fontify-code-blocks-natively t))
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-preview-mode
    :after solarized-theme
    :defer t
    :config
    (setq markdown-preview-stylesheets
          '("https://cdn.rawgit.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css"
            "https://cdn.rawgit.com/isagalaev/highlight.js/master/src/styles/solarized-light.css")))
#+end_src

#+begin_src emacs-lisp
  (use-package org
    :custom-face
    (org-level-1 ((t (:inherit variable-pitch :foreground "#cb4b16"))))
    (org-level-2 ((t (:inherit variable-pitch :foreground "#859900"))))
    (org-level-3 ((t (:inherit variable-pitch :foreground "#268bd2"))))
    (org-level-4 ((t (:inherit variable-pitch :foreground "#b58900")))))
#+end_src

#+begin_src emacs-lisp
  (load-library "org-config")
#+end_src

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

#+begin_src emacs-lisp
  (use-package org-re-reveal
    :defer t
    :config
    (add-hook 'org-mode-hook (lambda () (load-library "org-re-reveal"))))
#+end_src

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

#+begin_src emacs-lisp
  (use-package paredit
    :hook ((lisp-mode emacs-lisp-mode) . paredit-mode)
    :ensure t
    :config
    (defun check-region-parens ()
      "Check if parentheses in the region are balanced. Signals a
  scan-error if not."
      (interactive)
      (save-restriction
        (save-excursion
          (let ((deactivate-mark nil))
            (condition-case c
                (progn
                  (narrow-to-region (region-beginning) (region-end))
                  (goto-char (point-min))
                  (while (/= 0 (- (point)
                                  (forward-list))))
                  t)
              (scan-error (signal 'scan-error '("Region parentheses not balanced")))))))))
#+end_src

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config (projectile-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package quelpa-use-package
    :after quelpa
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (load-library "pollen-config")
#+end_src

#+begin_src emacs-lisp
  (load-library "postgres-dev")
#+end_src

#+begin_src emacs-lisp
  (load-library "server-config")
#+end_src

#+begin_src emacs-lisp
  (load-library "show-paren-config")
#+end_src

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package recentf
    :defer 10
    :bind ("C-x C-r" . recentf-open-files)
    :config
    (recentf-mode 1)
    (setq recentf-max-menu-items 50
          recentf-max-saved-items 100))
#+end_src

#+begin_src emacs-lisp
  (use-package ruby-mode
    :mode (("\\.rake\'" . ruby-mode)
           ("Rakefile\'" . ruby-mode)
           ("rakefile\'" . ruby-mode)
           ("\\.gemspec'" . ruby-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package shell-script-mode
    :interpreter ("bash" . shell-script-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package solarized-theme
    :ensure t
    :if window-system
    :config
    (setq solarized-distinct-fringe-background t
          solarized-high-contrast-mode-line t))
#+end_src

#+begin_src emacs-lisp
  (use-package typo
    :defer t
    :config
    (progn
      (setq-default typo-language "English")
      (defun enable-typo-mode ()
        (cond ((string-match "/_\\(drafts\\|posts\\)/.+\\.\\(markdown\\|\\md\\)$" buffer-file-name)
               (typo-mode 1))))
      (add-hook 'markdown-mode-hook 'enable-typo-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package yasnippet
    :defer t
    :config
    (setq yasindent-line 'fixed))

  ;; ;; (load-library "yasnippet-config")
#+end_src

Customizations

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "settings.el" user-emacs-directory))
  (load custom-file)
#+end_src

#+begin_src emacs-lisp
  (load-library "auto-save-config")
#+end_src
