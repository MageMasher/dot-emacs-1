# key: cenumt
# --
-- schema: ${1:schema}
-- singular: ${2:singular}
-- plural: ${3:plural}
-- id-type: ${4:INT}
CREATE TABLE $1.$3
(
  $2_id $4 NOT NULL,
  $2_name TEXT NOT NULL
);
COMMENT ON TABLE $1.$3 IS
'Enumerates valid $2 values';
CREATE UNIQUE INDEX $3_$2_id_key ON $1.$3 ($2_id);
COMMENT ON INDEX $1.$3_$2_id_key IS 
'Surrogate key';
CREATE UNIQUE INDEX $3_$2_name_key ON $1.$3 ($2_name);
COMMENT ON INDEX $1.$3_$2_name_key IS 
'Natural key';

$0

CREATE FUNCTION
$1.new_$2(in_$2_name TEXT, in_raises_if_exists BOOLEAN)
RETURNS $4
STRICT LANGUAGE PLPGSQL AS $body$
/** 
 *
 * This function creates a new $2 with the given
 * $2_name, returning the $2_id associated
 * with the new $2.
 * Raises exception if an $2 with the given
 * $2_name already exists and in_raises_if_exist is TRUE.
 * 
 * @private
 *
 * @param[IN]   in_$2_name
 * @param[IN]   in_raises_if_exists
 * @param[OUT]  $2_id
 * @return
 *
 * @author     Michael Glaesemann <michael.glaesemann@myyearbook.com>
 * @since      `(format-time-string "%Y-%m-%d" (current-time))`
 */
DECLARE
  v_$2_id $1.$3.$2_id%TYPE;
BEGIN
  BEGIN
    INSERT INTO $1.$3 ($2_name)
      VALUES (in_$2_name)
      RETURNING $3.$2_id INTO v_$2_id;
  EXCEPTION WHEN unique_violation THEN
    IF NOT in_raises_if_exists THEN
      SELECT INTO v_$2_id
             $3.$2_id
        FROM $1.$3
        WHERE $3.$2_name = in_$2_name;
    ELSE
      RAISE EXCEPTION '$2 with $2_name % already exists.', 
            quote_literal(in_$2_name);
    END IF;
  END;
  RETURN v_$2_id;
END;
$body$;

CREATE FUNCTION
$1.new_$2(in_$2_name TEXT, OUT $2_id $4)
RETURNS $4
STRICT LANGUAGE SQL AS $body$
/** 
 *
 * This function creates a new $2 with the given
 * $2_name, returning the $2_id associated
 * with the new $2.
 * An exception is raised if an $2 with the given
 * $2_name already exists.
 * 
 * @private
 *
 * @param[IN]   in_$2_name
 * @param[OUT]  $2_id
 * @return
 *
 * @author     Michael Glaesemann <michael.glaesemann@myyearbook.com>
 * @since      `(format-time-string "%Y-%m-%d" (current-time))`
 */
  SELECT $1.new_$2(\$1, TRUE);
$body$;

CREATE FUNCTION
$1.$2_id(in_$2_name TEXT, in_create_if_necessary BOOLEAN, OUT $2_id $4)
RETURNS $4
STRICT LANGUAGE PLPGSQL AS $body$
/** 
 *
 * This function returns the $2_id associated with the given
 * $2_name. If create_if_necessary is TRUE (and no $2
 * with the given $2_name already exists), a new $2
 * is created and the $2_id of the newly-minted $2
 * is returned; otherwise, an exception is raised.
 *
 * @private
 *
 * @param[IN]   in_$2_name
 * @param[IN]   in_create_if_necessary
 * @param[OUT]  $2_id
 * @return
 *
 * @author     Michael Glaesemann <michael.glaesemann@myyearbook.com>
 * @since      `(format-time-string "%Y-%m-%d" (current-time))`
 */
DECLARE
  k_raises_if_exists CONSTANT BOOLEAN := FALSE;
BEGIN
  SELECT INTO $2_id
         $3.$2_id
    FROM $1.$3
    WHERE $3.$2_name = in_$2_name;
  IF NOT FOUND THEN
    IF in_create_if_necessary THEN
       $2_id := $1.new_$2(in_$2_name, k_raises_if_exists);
    ELSE
      RAISE EXCEPTION '$2_name % does not exist', 
            quote_literal(in_$2_name);
    END IF;
  END IF;
END;
$body$;

CREATE FUNCTION
$1.$2_id(in_$2_name TEXT, OUT $2_id $4)
RETURNS $4
STRICT LANGUAGE sql AS $body$
/** 
 *
 * This function returns the $2_id associated with the given
 * $2_name. An exception is raised if no $2 exists
 * with the given $2_name.
 *
 * @private
 *
 * @param[IN]   in_$2_name
 * @param[OUT]  $2_id
 * @return
 *
 * @author     Michael Glaesemann <michael.glaesemann@myyearbook.com>
 * @since      `(format-time-string "%Y-%m-%d" (current-time))`
 */
  SELECT $1.$2_id(\$1, FALSE);
$body$;
